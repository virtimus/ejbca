#####
# Configuration file for default values for the SCEP RA Server
# Configure as you please, but all values must be set to something.
#
# Default values (that you enter here) is built into the application and deployed
# as default values.
#
# By setting the property allow.external-dynamic.configuration to true, you can also dynamically re-configure
# the app by changing values in properties files in the file system.
# Avoiding dynamic configuration can be desired from security point of view.
# Perhaps a user with write access to /etc should not be able to configure the RA?
# 
# You can put a nodecontrol.properties file in your "app server runtime home"/conf directory
# to override these values. To find out which this directory is, it is logged during startup as for example:
# [EjbcaConfiguration] Added file to configuration source: /opt/jboss-4.2.2.GA/bin/conf/nodecontrol.properties
# This file is re-read if changes so changes can be made in runtime.
#
# You can put a /etc/ejbca/conf/nodecontrol/nodecontrol.properties file to override these values.
# This file is re-read if changes so changes can be made in runtime.
#
# Finally you can override anything by setting system properties for your appserver, for example:
# java -Dnodecontrol.jbosshome=/opt/jboss
#####

# Set to true to allow dynamic re-configuration using properties files in the file 
# system as defines in above. If set to true, you can usually see in the logfile where it
# tries to read the properties file, so you can find for example appserver_home. 
allow.external-dynamic.configuration=true

# The path where certificates authorized to access the web application is stored.
# People with these certificates will be allowed to access the complete application. 
nodecontrol.authorized.admin.cert.dir=/home/tomas/tmp/authcerts

# Configure default behavior of the panels, open or closed
# Value is true for open and false for closed.
nodecontrol.jbosspanel.open=true
nodecontrol.rotationpanel.open=true
nodecontrol.logpanel.open=true

# The URL to the health check servlet that is used to verify that EJBCA is
# all up and running
nodecontrol.healthcheckurl=http://127.0.0.1:8080/ejbca/publicweb/healthcheck/ejbcahealth

# What to grep for when checking if JBoss is running
# NodeControl does like a 'ps -auxww | grep ${string below}
# org.jboss.Main works good on linux, simply jboss on MacOSX
#nodecontrol.running.grepfor=org.jboss.Main
nodecontrol.running.grepfor=jboss

# The stop and start commands used when the stop and start buttins are pressed
# You should try out these commands good to run in the background and pipe console output to /dev/null etc
#nodecontrol.startcmd=sudo -H -u jboss /home/tomas/Dev/jboss-4.2.2.GA/bin/run.sh > /dev/null 2>&1 &
#nodecontrol.stopcmd=sudo -H -u jboss /home/tomas/Dev/jboss-4.2.2.GA/bin/shutdown.sh -S > /dev/null 2>&1
nodecontrol.startcmd=/home/tomas/Dev/jboss-4.2.2.GA/bin/run.sh > /dev/null 2>&1 &
nodecontrol.stopcmd=/home/tomas/Dev/jboss-4.2.2.GA/bin/shutdown.sh -S > /dev/null 2>&1

# The full filename to the file that can be used to remove a node from rotation with the 
# hardware load balancer.
# file must contain one line:
# ${nodecontrol.rotation.control.key}=true
# will remove the node from rotation
# ${nodecontrol.rotation.control.key}=false
# will add the node to rotation again
nodecontrol.rotation.control.file=/home/tomas/tmp/authcerts/rotation.txt

# The name of the key (key=true/false) located in the rotation file named above.
# When the key is set to true, this is the message that will appear as the EJBCA 
# health check message.
# Example
# DOWN_FOR_MAINTENANCE
# So when rotation.txt contains the line:
# DOWN_FOR_MAINTENANCE=true
# This message will be returned by EJBCA health check, so the node is taken out from rotation
nodecontrol.rotation.control.key=DOWN_FOR_MAINTENANCE

# The directories where log files we should be able to watch are located
nodecontrol.log.directory.1=/home/tomas/Dev/jboss-4.2.2.GA/server/default/log
nodecontrol.log.directory.2=/var/log

# When making a directory listing of log files, we only want to show the latest ones and not all of them if there is a 
# lot of old log files. Setting this value limits the display of files to a number of days back in time.
nodecontrol.log.daystolist=30

# When making a grep or tail this limits the number of rows that will be returned.
# If the result have more lines than this, the rest will be ignored.
nodecontrol.log.maxlines=1000

# The command to run to send a file (tail) to another host
# Takes some substitution variables: 
# {lines} replaced by user input for how many lines of log file will be used (think tail -n)
# {file} which log file to pipe
# {host} the dns name or ip address of the host to receive the pipe
# {port} the port on the host to pipe to
#nodecontrol.log.pipecmd=tail -n {lines} -f {file} | nc {host} {port}  
nodecontrol.log.pipecmd=tail -n {lines} -f {file} | openssl s_client -connect {host}:{port}

# The user information string displayed below the "Pipe" button in the GUI.
# This explains what the user must do in order to receive a Pipe from the command above.
# (you have to escape commas, and possibly some other special characters, with a backslash)
#nodecontrol.log.pipeuserinfo=Before executing Pipe\, start 'openssl s_server -accept 9999' locally on your machine.
nodecontrol.log.pipeuserinfo=

# This is formatted text in antlr based "wiki syntax", see http://docs.jboss.com/seam/2.0.1.GA/reference/en/html_single/#d0e8478
# for details about the <s:formattedText/> component.
# This text is displayed just after the pipeuserinfo above
# You can exclude one of the texts simply by setting it empty: nodecontrol.log.pipeuserinfo=
nodecontrol.log.pipeuserinfoformat=See <a href="http://wiki.ejbca.org/">Wiki</a> for info about starting openssl.
